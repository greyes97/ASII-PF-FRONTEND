/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, RouterHistory } from "@stencil/router";
export namespace Components {
    interface AppAlert {
        "messages": string;
        "prueba": (e)=>void;
        "typeMessage": any;
        "whatAlert": (type: any) => Promise<void>;
    }
    interface AppFooter {
    }
    interface AppHistory {
    }
    interface AppHome {
        "getUser": () => Promise<void>;
        "history": RouterHistory;
    }
    interface AppLogin {
        "history": RouterHistory;
        /**
          * Este es un metodo async el cual obtiene la informacion de la base de datos por medio del los @param
          * @param em obtiene el valor del email
          * @param pass obtiene el valor del password del usuario.
         */
        "validation": (em: any, pass: any) => Promise<void>;
    }
    interface AppMeeting {
        "getMeetengs": () => Promise<void>;
        "getMeetengsGuest": () => Promise<void>;
    }
    interface AppMeetingNew {
        "close": (e,b)=>void;
        "data": any;
        "deleteMeetingGuest": () => Promise<void>;
        "deleteMeetingPatient": () => Promise<void>;
        "editMeeting": boolean;
        "idPatient": string;
        "saveNewMeetingGuest": () => Promise<void>;
        "saveNewMeetingPatient": () => Promise<void>;
        "type": string;
        "updateMeetingGuest": () => Promise<void>;
        "updateMeetingPatient": () => Promise<void>;
    }
    interface AppNavbar {
    }
    interface AppPatientForm {
        "closeViewPatient": ()=>void;
        "dataPatient": any;
        "loadData": ()=>void;
        "openFormRooms": (e,b)=>void;
        "state": boolean;
        "updatePatient": () => Promise<void>;
    }
    interface AppPatientNew {
        "closeViewPatient": ()=>void;
        "loadData": ()=>void;
        "openFormRoom": (e,b)=>void;
        "savePatient": (e: any) => Promise<void>;
        "state": boolean;
    }
    interface AppPatientRoomAsignation {
        "closeForm": ()=>void;
        "getRooms": () => Promise<void>;
        "idPatient": any;
        "saveRoomPatient": (data: any) => Promise<void>;
        "updatePatient": (status: any) => Promise<void>;
    }
    interface AppPatientStatus {
        "changeStatusPatient": () => Promise<void>;
        "fullName": string;
        "idPatient": any;
        "returnState": (e)=>void;
    }
    interface AppPatients {
        "getPatientWait": () => Promise<void>;
        "getRooms": () => Promise<void>;
    }
    interface AppPatientsSearch {
        "close": ()=>void;
        "getPatient": () => Promise<void>;
        "openAsignationRoom": (e,b)=>void;
    }
    interface AppPrescription {
        /**
          * Metodo ASYNC Este metodo obtiene una lista de registros de la base de datos por medio de la API
         */
        "getDataTable": () => Promise<void>;
        /**
          * Metodo ASYNC Este metodo guarda la informacion en la base de datos que ha ingresado en el formulario el usuario.
          * @param data informacion del form
         */
        "savePrescri": (data: any) => Promise<void>;
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppRoot {
    }
    interface AppSearch {
        "closeComponent": (e)=>void;
        "getHisotory": () => Promise<void>;
        "getMeetings": () => Promise<void>;
        "getPatients": () => Promise<void>;
        "getPrescriptions": () => Promise<void>;
        "history": boolean;
        "returnData": (e)=>void;
        "textInfoInput": string;
        "textViewInput": string;
        "type": string;
    }
    interface AppViewopeation {
    }
}
declare global {
    interface HTMLAppAlertElement extends Components.AppAlert, HTMLStencilElement {
    }
    var HTMLAppAlertElement: {
        prototype: HTMLAppAlertElement;
        new (): HTMLAppAlertElement;
    };
    interface HTMLAppFooterElement extends Components.AppFooter, HTMLStencilElement {
    }
    var HTMLAppFooterElement: {
        prototype: HTMLAppFooterElement;
        new (): HTMLAppFooterElement;
    };
    interface HTMLAppHistoryElement extends Components.AppHistory, HTMLStencilElement {
    }
    var HTMLAppHistoryElement: {
        prototype: HTMLAppHistoryElement;
        new (): HTMLAppHistoryElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppLoginElement extends Components.AppLogin, HTMLStencilElement {
    }
    var HTMLAppLoginElement: {
        prototype: HTMLAppLoginElement;
        new (): HTMLAppLoginElement;
    };
    interface HTMLAppMeetingElement extends Components.AppMeeting, HTMLStencilElement {
    }
    var HTMLAppMeetingElement: {
        prototype: HTMLAppMeetingElement;
        new (): HTMLAppMeetingElement;
    };
    interface HTMLAppMeetingNewElement extends Components.AppMeetingNew, HTMLStencilElement {
    }
    var HTMLAppMeetingNewElement: {
        prototype: HTMLAppMeetingNewElement;
        new (): HTMLAppMeetingNewElement;
    };
    interface HTMLAppNavbarElement extends Components.AppNavbar, HTMLStencilElement {
    }
    var HTMLAppNavbarElement: {
        prototype: HTMLAppNavbarElement;
        new (): HTMLAppNavbarElement;
    };
    interface HTMLAppPatientFormElement extends Components.AppPatientForm, HTMLStencilElement {
    }
    var HTMLAppPatientFormElement: {
        prototype: HTMLAppPatientFormElement;
        new (): HTMLAppPatientFormElement;
    };
    interface HTMLAppPatientNewElement extends Components.AppPatientNew, HTMLStencilElement {
    }
    var HTMLAppPatientNewElement: {
        prototype: HTMLAppPatientNewElement;
        new (): HTMLAppPatientNewElement;
    };
    interface HTMLAppPatientRoomAsignationElement extends Components.AppPatientRoomAsignation, HTMLStencilElement {
    }
    var HTMLAppPatientRoomAsignationElement: {
        prototype: HTMLAppPatientRoomAsignationElement;
        new (): HTMLAppPatientRoomAsignationElement;
    };
    interface HTMLAppPatientStatusElement extends Components.AppPatientStatus, HTMLStencilElement {
    }
    var HTMLAppPatientStatusElement: {
        prototype: HTMLAppPatientStatusElement;
        new (): HTMLAppPatientStatusElement;
    };
    interface HTMLAppPatientsElement extends Components.AppPatients, HTMLStencilElement {
    }
    var HTMLAppPatientsElement: {
        prototype: HTMLAppPatientsElement;
        new (): HTMLAppPatientsElement;
    };
    interface HTMLAppPatientsSearchElement extends Components.AppPatientsSearch, HTMLStencilElement {
    }
    var HTMLAppPatientsSearchElement: {
        prototype: HTMLAppPatientsSearchElement;
        new (): HTMLAppPatientsSearchElement;
    };
    interface HTMLAppPrescriptionElement extends Components.AppPrescription, HTMLStencilElement {
    }
    var HTMLAppPrescriptionElement: {
        prototype: HTMLAppPrescriptionElement;
        new (): HTMLAppPrescriptionElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSearchElement extends Components.AppSearch, HTMLStencilElement {
    }
    var HTMLAppSearchElement: {
        prototype: HTMLAppSearchElement;
        new (): HTMLAppSearchElement;
    };
    interface HTMLAppViewopeationElement extends Components.AppViewopeation, HTMLStencilElement {
    }
    var HTMLAppViewopeationElement: {
        prototype: HTMLAppViewopeationElement;
        new (): HTMLAppViewopeationElement;
    };
    interface HTMLElementTagNameMap {
        "app-alert": HTMLAppAlertElement;
        "app-footer": HTMLAppFooterElement;
        "app-history": HTMLAppHistoryElement;
        "app-home": HTMLAppHomeElement;
        "app-login": HTMLAppLoginElement;
        "app-meeting": HTMLAppMeetingElement;
        "app-meeting-new": HTMLAppMeetingNewElement;
        "app-navbar": HTMLAppNavbarElement;
        "app-patient-form": HTMLAppPatientFormElement;
        "app-patient-new": HTMLAppPatientNewElement;
        "app-patient-room-asignation": HTMLAppPatientRoomAsignationElement;
        "app-patient-status": HTMLAppPatientStatusElement;
        "app-patients": HTMLAppPatientsElement;
        "app-patients-search": HTMLAppPatientsSearchElement;
        "app-prescription": HTMLAppPrescriptionElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "app-search": HTMLAppSearchElement;
        "app-viewopeation": HTMLAppViewopeationElement;
    }
}
declare namespace LocalJSX {
    interface AppAlert {
        "messages"?: string;
        "prueba"?: (e)=>void;
        "typeMessage"?: any;
    }
    interface AppFooter {
    }
    interface AppHistory {
    }
    interface AppHome {
        "history"?: RouterHistory;
    }
    interface AppLogin {
        "history"?: RouterHistory;
    }
    interface AppMeeting {
    }
    interface AppMeetingNew {
        "close"?: (e,b)=>void;
        "data"?: any;
        "editMeeting"?: boolean;
        "idPatient"?: string;
        "type"?: string;
    }
    interface AppNavbar {
    }
    interface AppPatientForm {
        "closeViewPatient"?: ()=>void;
        "dataPatient"?: any;
        "loadData"?: ()=>void;
        "openFormRooms"?: (e,b)=>void;
        "state"?: boolean;
    }
    interface AppPatientNew {
        "closeViewPatient"?: ()=>void;
        "loadData"?: ()=>void;
        "openFormRoom"?: (e,b)=>void;
        "state"?: boolean;
    }
    interface AppPatientRoomAsignation {
        "closeForm"?: ()=>void;
        "idPatient"?: any;
    }
    interface AppPatientStatus {
        "fullName"?: string;
        "idPatient"?: any;
        "returnState"?: (e)=>void;
    }
    interface AppPatients {
    }
    interface AppPatientsSearch {
        "close"?: ()=>void;
        "openAsignationRoom"?: (e,b)=>void;
    }
    interface AppPrescription {
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppRoot {
    }
    interface AppSearch {
        "closeComponent"?: (e)=>void;
        "history"?: boolean;
        "returnData"?: (e)=>void;
        "textInfoInput"?: string;
        "textViewInput"?: string;
        "type"?: string;
    }
    interface AppViewopeation {
    }
    interface IntrinsicElements {
        "app-alert": AppAlert;
        "app-footer": AppFooter;
        "app-history": AppHistory;
        "app-home": AppHome;
        "app-login": AppLogin;
        "app-meeting": AppMeeting;
        "app-meeting-new": AppMeetingNew;
        "app-navbar": AppNavbar;
        "app-patient-form": AppPatientForm;
        "app-patient-new": AppPatientNew;
        "app-patient-room-asignation": AppPatientRoomAsignation;
        "app-patient-status": AppPatientStatus;
        "app-patients": AppPatients;
        "app-patients-search": AppPatientsSearch;
        "app-prescription": AppPrescription;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "app-search": AppSearch;
        "app-viewopeation": AppViewopeation;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-alert": LocalJSX.AppAlert & JSXBase.HTMLAttributes<HTMLAppAlertElement>;
            "app-footer": LocalJSX.AppFooter & JSXBase.HTMLAttributes<HTMLAppFooterElement>;
            "app-history": LocalJSX.AppHistory & JSXBase.HTMLAttributes<HTMLAppHistoryElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-login": LocalJSX.AppLogin & JSXBase.HTMLAttributes<HTMLAppLoginElement>;
            "app-meeting": LocalJSX.AppMeeting & JSXBase.HTMLAttributes<HTMLAppMeetingElement>;
            "app-meeting-new": LocalJSX.AppMeetingNew & JSXBase.HTMLAttributes<HTMLAppMeetingNewElement>;
            "app-navbar": LocalJSX.AppNavbar & JSXBase.HTMLAttributes<HTMLAppNavbarElement>;
            "app-patient-form": LocalJSX.AppPatientForm & JSXBase.HTMLAttributes<HTMLAppPatientFormElement>;
            "app-patient-new": LocalJSX.AppPatientNew & JSXBase.HTMLAttributes<HTMLAppPatientNewElement>;
            "app-patient-room-asignation": LocalJSX.AppPatientRoomAsignation & JSXBase.HTMLAttributes<HTMLAppPatientRoomAsignationElement>;
            "app-patient-status": LocalJSX.AppPatientStatus & JSXBase.HTMLAttributes<HTMLAppPatientStatusElement>;
            "app-patients": LocalJSX.AppPatients & JSXBase.HTMLAttributes<HTMLAppPatientsElement>;
            "app-patients-search": LocalJSX.AppPatientsSearch & JSXBase.HTMLAttributes<HTMLAppPatientsSearchElement>;
            "app-prescription": LocalJSX.AppPrescription & JSXBase.HTMLAttributes<HTMLAppPrescriptionElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-search": LocalJSX.AppSearch & JSXBase.HTMLAttributes<HTMLAppSearchElement>;
            "app-viewopeation": LocalJSX.AppViewopeation & JSXBase.HTMLAttributes<HTMLAppViewopeationElement>;
        }
    }
}
